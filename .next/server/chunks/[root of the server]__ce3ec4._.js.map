{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/pos_software/app/api/auth/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\n\r\n// Hardcoded admin credentials\r\nconst ADMIN_EMAIL = \"admin@example.com\";\r\nconst ADMIN_PASSWORD = \"admin123\";\r\nconst MANAGER_EMAIL = \"manager@example.com\";\r\nconst MANAGER_PASSWORD = \"manager123\";\r\nexport async function POST(request: Request) {\r\n  const { email, password, role } = await request.json();\r\n\r\n  // Check if the user is an admin\r\n  if ( email === ADMIN_EMAIL && password === ADMIN_PASSWORD) {\r\n    return NextResponse.json({\r\n      user: { email, role: \"admin\" },\r\n      token: \"admin-token\", // Simulate a token\r\n    });\r\n  }\r\n  else if (email === MANAGER_EMAIL && password === MANAGER_PASSWORD) {    \r\n    return NextResponse.json({\r\n        user: { email, role: \"manager\" },\r\n        token: \"manager-token\", // Simulate a token\r\n      });\r\n    }\r\n  // If credentials are invalid\r\n  return NextResponse.json({ error: \"Invalid credentials\" }, { status: 401 });\r\n}"],"names":[],"mappings":";;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM,cAAc;AACpB,MAAM,iBAAiB;AACvB,MAAM,gBAAgB;AACtB,MAAM,mBAAmB;AAClB,eAAe,KAAK,OAAgB;IACzC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI;IAEpD,gCAAgC;IAChC,IAAK,UAAU,eAAe,aAAa,gBAAgB;QACzD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,MAAM;gBAAE;gBAAO,MAAM;YAAQ;YAC7B,OAAO;QACT;IACF,OACK,IAAI,UAAU,iBAAiB,aAAa,kBAAkB;QACjE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,MAAM;gBAAE;gBAAO,MAAM;YAAU;YAC/B,OAAO;QACT;IACF;IACF,6BAA6B;IAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAsB,GAAG;QAAE,QAAQ;IAAI;AAC3E"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}