{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/pos_software/app/lib/auth.ts"],"sourcesContent":["import { compare } from \"bcryptjs\";\r\n\r\nexport async function verifyPassword(password: string, hashedPassword: string) {\r\n  return compare(password, hashedPassword);\r\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,eAAe,QAAgB,EAAE,cAAsB;IAC3E,OAAO,CAAA,GAAA,mIAAA,CAAA,UAAO,AAAD,EAAE,UAAU;AAC3B"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/pos_software/app/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport async function getAdmin(email: string) {\r\n  return prisma.admin.findUnique({ where: { email } });\r\n}\r\n\r\nexport async function getManager(email: string) {\r\n  return prisma.manager.findUnique({ where: { email } });\r\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,SAAS,KAAa;IAC1C,OAAO,OAAO,KAAK,CAAC,UAAU,CAAC;QAAE,OAAO;YAAE;QAAM;IAAE;AACpD;AAEO,eAAe,WAAW,KAAa;IAC5C,OAAO,OAAO,OAAO,CAAC,UAAU,CAAC;QAAE,OAAO;YAAE;QAAM;IAAE;AACtD"}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/pos_software/app/api/auth/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { verifyPassword } from \"../../lib/auth\";\r\nimport { getAdmin, getManager } from \"../../lib/db\";\r\n\r\nexport async function POST(request: Request) {\r\n  const { email, password, role } = await request.json();\r\n\r\n  let user;\r\n  if (role === \"admin\") {\r\n    user = await getAdmin(email);\r\n  } else if (role === \"manager\") {\r\n    user = await getManager(email);\r\n  }\r\n\r\n  if (!user) {\r\n    return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n  }\r\n\r\n  const isValid = await verifyPassword(password, user.password);\r\n  if (!isValid) {\r\n    return NextResponse.json({ error: \"Invalid password\" }, { status: 401 });\r\n  }\r\n\r\n  return NextResponse.json({ user });\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAgB;IACzC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI;IAEpD,IAAI;IACJ,IAAI,SAAS,SAAS;QACpB,OAAO,MAAM,CAAA,GAAA,kHAAA,CAAA,WAAQ,AAAD,EAAE;IACxB,OAAO,IAAI,SAAS,WAAW;QAC7B,OAAO,MAAM,CAAA,GAAA,kHAAA,CAAA,aAAU,AAAD,EAAE;IAC1B;IAEA,IAAI,CAAC,MAAM;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtE;IAEA,MAAM,UAAU,MAAM,CAAA,GAAA,oHAAA,CAAA,iBAAc,AAAD,EAAE,UAAU,KAAK,QAAQ;IAC5D,IAAI,CAAC,SAAS;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAmB,GAAG;YAAE,QAAQ;QAAI;IACxE;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE;IAAK;AAClC"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}